{
	"info": {
		"_postman_id": "a38bd8f7-6c0a-43c0-b870-b2372296565d",
		"name": "MRX API TESTING",
		"description": "\nThis is the API of MRX Systems.\n\nIt allows you to interact with the MRX systems.\n\n## Authentication\nTo authenticate, use the **POST /auth/login** route with the following body:\n```json\n{\n    \"email\": \"youremail@example.com\",\n    \"password\": \"yourpassword\"\n}\n```\nAfter a successful login, you will receive a token in the response body (`content.access_token`).\n\nUse this token in the **Authorization** header with the **Bearer** prefix to access the protected routes.\n\n## Permissions\nPermissions are used to control access to different routes in the application.\n\nEach user has specific permissions for each selected database during their requests.\n\nExamples:\n\n- Database1: `['profile.all', 'example.all']`.\n- Database2: `['profile.all', 'example.read']`.\n\n## Permissions Structure\n- Permissions are structured in the format: `[module].[action]`.\n\n## Actions\n- **all**: Allows access to all resources.\n- **read**: Allows reading resources.\n- **create**: Allows creating resources.\n- **update**: Allows updating resources.\n- **delete**: Allows deleting resources.\n\n## Contact\nIf you have any questions or suggestions, feel free to contact us.\n- **Email**: [contact@mrxsys.com](mailto:contact@mrxsys.com)\n---\n\n*MRX Systems Â© 2024*\n\n\nContact Support:\n Name: MRX Systems\n Email: contact@mrxsys.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8692884"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the current iteration and response details\r",
									"const response = pm.response;\r",
									"\r",
									"// Retrieve the email and password for this iteration\r",
									"const email = pm.iterationData.get(\"email\") || pm.request.json().email;\r",
									"const password = pm.iterationData.get(\"password\") || pm.request.json().password;\r",
									"\r",
									"// Iteration 1 -> SUCCESS\r",
									"if (pm.info.iteration === 0) {\r",
									"    pm.test(\"Iteration 1 - Verify status code -> SUCCESS\", () => {\r",
									"        response.to.have.status(200);  // Check that the status code is 200\r",
									"        pm.expect(response.status).to.eql(\"OK\");  // Confirm response status as \"OK\"\r",
									"    });\r",
									"\r",
									"    pm.test(\"Iteration 1 - Response body structure is valid -> SUCCESS\", () => {\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('statusCode');  // statusCode should exist\r",
									"        pm.expect(response.json().statusCode).to.be.a('number');  // statusCode should be a number\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('content');  // content should exist\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('message');  // message should exist\r",
									"        pm.expect(response.json().message).to.be.a('string');  // message should be a string\r",
									"        pm.expect(response.json().content).to.be.an('object').that.has.property('access_token');  // access_token should exist\r",
									"        pm.expect(response.json().content.access_token).to.be.a('string');  // access_token should be a string\r",
									"    });\r",
									"\r",
									"    pm.test(\"Iteration 1 - Verify message -> SUCCESS\", () => {\r",
									"        pm.expect(response.json().message).to.eql(\"Login successful\");  // Expect login success message\r",
									"    });\r",
									"\r",
									"    pm.test(\"Iteration 1 - Email format is valid -> SUCCESS\", () => {\r",
									"        pm.expect(email).to.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);  // Valid email regex\r",
									"    });\r",
									"\r",
									"    pm.test(\"Iteration 1 - Password format is valid -> SUCCESS\", () => {\r",
									"        pm.expect(password).to.match(/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[\\W_]).{8,32}$/);  // Valid password regex\r",
									"    });\r",
									"}\r",
									"// Iteration 2 -> UNAUTHORIZED\r",
									"else if (pm.info.iteration === 1) {\r",
									"    pm.test(\"Iteration 2 - Verify status code -> UNAUTHORIZED\", () => {\r",
									"        response.to.have.status(401);  // Check that the status code is 404\r",
									"        pm.expect(response.status).to.eql(\"Unauthorized\");  // Confirm response status as \"Unauthorized\"\r",
									"    });\r",
									"\r",
									"    pm.test(\"Iteration 2 - Response body structure is valid -> UNAUTHORIZED\", () => {\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('statusCode');  // statusCode should exist\r",
									"        pm.expect(response.json().statusCode).to.be.a('number');  // statusCode should be a number\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('content');  // content should exist\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('message');  // message should exist\r",
									"        pm.expect(response.json().message).to.be.a('string');  // message should be a string\r",
									"        pm.expect(response.json().content).to.be.an('object').that.has.all.keys('table', 'database');  // content should have 'table' and 'database' keys\r",
									"        pm.expect(response.json().content.table).to.be.a('string');  // 'table' should be a string\r",
									"        pm.expect(response.json().content.database).to.be.a('string');  // 'database' should be a string\r",
									"    });\r",
									"\r",
									"    pm.test(\"Iteration 2 - Verify message -> UNAUTHORIZED\", () => {\r",
									"        pm.expect(response.json().message).to.eql(\"Model User not found in database auth_dev\");  // Expect specific message for unauthorized access\r",
									"    });\r",
									"}\r",
									"// Iteration 3 -> BAD REQUEST\r",
									"else if (pm.info.iteration === 2) {\r",
									"    pm.test(\"Iteration 3 - Verify status code -> BAD REQUEST\", () => {\r",
									"        response.to.have.status(400);  // Check that the status code is 400\r",
									"        pm.expect(response.status).to.eql(\"Bad Request\");  // Confirm response status as \"Bad Request\"\r",
									"    });\r",
									"\r",
									"    pm.test(\"Iteration 3 - Response body structure is valid -> BAD REQUEST\", () => {\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('statusCode');  // statusCode should exist\r",
									"        pm.expect(response.json().statusCode).to.be.a('number');  // statusCode should be a number\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('content');  // content should exist\r",
									"        pm.expect(response.json().content).to.be.an('array');  // content should be an array of error details\r",
									"\r",
									"        // Iterate over each item in the content array and verify its structure\r",
									"        for (let i = 0; i < response.json().content.length; i++) {\r",
									"            let item = response.json().content[i];\r",
									"\r",
									"            pm.expect(item).to.be.an('object').that.has.all.keys('property', 'message', 'contraints');  // Ensure each error item has the required properties\r",
									"            pm.expect(item.property).to.be.a('string');  // Ensure 'property' is a string\r",
									"            pm.expect(item.message).to.be.a('string');  // Ensure 'message' is a string\r",
									"\r",
									"            pm.expect(item.contraints).to.be.an('object');  // Ensure 'contraints' is an object\r",
									"\r",
									"            // Validate specific constraint properties based on the error index\r",
									"            if (i === 0) {\r",
									"                pm.expect(item.contraints).to.have.property('format');  // Expect 'format' for email error\r",
									"                pm.expect(item.contraints.format).to.be.a('string');  // Ensure 'format' is a string\r",
									"            } else if (i === 1) {\r",
									"                pm.expect(item.contraints).to.have.property('limit');  // Expect 'limit' for password length error\r",
									"                pm.expect(item.contraints.limit).to.be.a('number');  // Ensure 'limit' is a number\r",
									"            } else if (i === 2) {\r",
									"                pm.expect(item.contraints).to.have.property('pattern');  // Expect 'pattern' for password pattern error\r",
									"                pm.expect(item.contraints.pattern).to.be.a('string');  // Ensure 'pattern' is a string\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.test(\"Iteration 3 - Verify message -> BAD REQUEST\", () => {\r",
									"        pm.expect(response.json().content[0].message).to.eql(\"error.presentation.schema.format\");  // Expect error message related to email format\r",
									"        pm.expect(response.json().content[1].message).to.eql(\"error.presentation.schema.minLength\");  // Expect error message related to password length\r",
									"        pm.expect(response.json().content[2].message).to.eql(\"error.presentation.schema.pattern\");  // Expect error message related to password pattern\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Allows to login to the system"
					},
					"response": [
						{
							"name": "Default Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": \"<number>\",\n  \"message\": \"<string>\",\n  \"content\": {\n    \"access_token\": \"<string>\"\n  }\n}"
						}
					]
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the current iteration and response details\r",
									"const response = pm.response;\r",
									"\r",
									"// Iteration 1 -> SUCCESS\r",
									"if (pm.info.iteration === 0) {\r",
									"    // Test when the response status is 200\r",
									"    pm.test(\"Iteration 1 - Verify status code -> SUCCESS\", () => {\r",
									"        response.to.have.status(200); // Verify status code is 200\r",
									"        pm.expect(response.status).to.eql(\"OK\"); // Confirm response status as \"OK\"\r",
									"    });\r",
									"\r",
									"    // Test: Verify response body structure\r",
									"    pm.test(\"Iteration 1 - Response body structure is valid -> SUCCESS\", () => {\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('statusCode');  // statusCode should exist\r",
									"        pm.expect(response.json().statusCode).to.be.a('number');  // statusCode should be a number\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('message');  // message should exist\r",
									"        pm.expect(response.json().message).to.be.a('string');  // message should be a string\r",
									"    });\r",
									"\r",
									"    // Test: Verify message is correct\r",
									"    pm.test(\"Iteration 1 - Verify message -> SUCCESS\", () => {\r",
									"        pm.expect(response.json().message).to.eql(\"Logout successful\"); // Expect logout success message\r",
									"    });\r",
									"}\r",
									"// Iteration 2 -> UNAUTHORIZED\r",
									"else if (pm.info.iteration === 1) {\r",
									"    // Test: Verify unauthorized status code (401)\r",
									"    pm.test(\"Iteration 2 - Verify status code -> UNAUTHORIZED\", () => {\r",
									"        response.to.have.status(401);  // Verify status code is 401\r",
									"        console.log(response.status);\r",
									"        pm.expect(response.status).to.eql(\"Unauthorized\"); // Confirm response status as \"UNAUTHORIZED\"\r",
									"    });\r",
									"\r",
									"    // Test: Verify response body structure\r",
									"    pm.test(\"Iteration 2 - Response body structure is valid -> UNAUTHORIZED\", () => {\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('statusCode');  // statusCode should exist\r",
									"        pm.expect(response.json().statusCode).to.be.a('number');  // statusCode should be a number\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('message');  // message should exist\r",
									"        pm.expect(response.json().message).to.be.a('string');  // message should be a string\r",
									"    });\r",
									"\r",
									"    // Test: Verify the error message for unauthorized access\r",
									"    pm.test(\"Iteration 2 - Verify message -> UNAUTHORIZED\", () => {\r",
									"        pm.expect(response.json().message).to.eql(\"Token missing\"); // Expect logout success message\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "Allows to Logout to the system"
					},
					"response": [
						{
							"name": "Default Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": \"<number>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "address",
			"item": [
				{
					"name": "Address - Insert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the current iteration and response details\r",
									"const response = pm.response;\r",
									"\r",
									"// Iteration 1 -> SUCCESS\r",
									"if (pm.info.iteration === 0) {\r",
									"    pm.test(\"Verify status code\", () => {\r",
									"        pm.response.to.have.status(201);\r",
									"        pm.expect(response.status).to.eql(\"Created\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response body structure is valid\", () => {\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('statusCode');\r",
									"        pm.expect(response.json().statusCode).to.be.a('number');\r",
									"\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('message');\r",
									"        pm.expect(response.json().message).to.be.a('string');\r",
									"\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('content');\r",
									"\r",
									"        pm.expect(response.json().content).to.be.an('object').that.has.property('table');\r",
									"        pm.expect(response.json().content.table).to.be.a('string');\r",
									"\r",
									"        pm.expect(response.json().content).to.be.an('object').that.has.property('databaseName');\r",
									"        pm.expect(response.json().content.databaseName).to.be.a('string');\r",
									"\r",
									"        pm.expect(response.json().content.data).to.be.an('array');\r",
									"\r",
									"        pm.expect(response.json().content.data[0]).to.be.an('object').that.has.property('idAddress');\r",
									"        pm.expect(response.json().content.data[0].idAddress).to.be.a('string');\r",
									"\r",
									"        pm.expect(response.json().content.data[0]).to.be.an('object').that.has.property('idAddressBookEntity');\r",
									"        pm.expect(response.json().content.data[0].idAddressBookEntity).to.satisfy((value) => typeof value === 'string' || value === null);\r",
									"\r",
									"        pm.expect(response.json().content.data[0]).to.be.an('object').that.has.property('sTitle');\r",
									"        pm.expect(response.json().content.data[0].sTitle).to.be.a('string');\r",
									"\r",
									"        pm.expect(response.json().content.data[0]).to.be.an('object').that.has.property('sStreet');\r",
									"        pm.expect(response.json().content.data[0].sStreet).to.be.a('string');\r",
									"\r",
									"        pm.expect(response.json().content.data[0]).to.be.an('object').that.has.property('sCity');\r",
									"        pm.expect(response.json().content.data[0].sCity).to.be.a('string');\r",
									"\r",
									"        pm.expect(response.json().content.data[0]).to.be.an('object').that.has.property('sZipCode');\r",
									"        pm.expect(response.json().content.data[0].sZipCode).to.be.a('string');\r",
									"\r",
									"        pm.expect(response.json().content.data[0]).to.be.an('object').that.has.property('sCountry');\r",
									"        pm.expect(response.json().content.data[0].sCountry).to.be.a('string');\r",
									"\r",
									"        pm.expect(response.json().content.data[0]).to.be.an('object').that.has.property('sProvince');\r",
									"        pm.expect(response.json().content.data[0].sProvince).to.satisfy((value) => typeof value === 'string' || value === null);\r",
									"\r",
									"        pm.expect(response.json().content.data[0]).to.be.an('object').that.has.property('idPax');\r",
									"        pm.expect(response.json().content.data[0].idPax).to.satisfy((value) => typeof value === 'string' || value === null);\r",
									"        \r",
									"        pm.expect(response.json().content).to.be.an('object').that.has.property('count');\r",
									"        pm.expect(response.json().content.count).to.be.a('number');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify message contains example\", () => {\r",
									"        pm.expect(response.json().message).to.eql(\"Address: 1 items inserted\");\r",
									"    });\r",
									"}\r",
									"// Iteration 2 -> BAD REQUEST\r",
									"else if (pm.info.iteration === 1) {\r",
									"\tpm.test(\"Iteration 2 - Verify status code -> BAD REQUEST\", () => {\r",
									"\t\tpm.response.to.have.status(400);\r",
									"\t\tpm.expect(response.status).to.eql(\"Bad Request\");\r",
									"\t});\r",
									"\r",
									"\tpm.test(\"Iteration 2 - Response body structure is valid -> BAD REQUEST\", () => {\r",
									"\t\tpm.expect(response.json()).to.be.an('object').that.has.property('statusCode');  // statusCode should exist\r",
									"\t\tpm.expect(response.json().statusCode).to.be.a('number');  // statusCode should be a number\r",
									"\t\tpm.expect(response.json()).to.be.an('object').that.has.property('content');  // content should exist\r",
									"\t\tpm.expect(response.json().content).to.be.an('array');  // content should be an array of error details\r",
									"\r",
									"\t\t// Iterate over each item in the content array and verify its structure\r",
									"\t\tfor (let i = 0; i < response.json().content.length; i++) {\r",
									"\t\t\tlet item = response.json().content[i];\r",
									"\r",
									"\t\t\tpm.expect(item).to.be.an('object').that.has.all.keys('property', 'message', 'contraints');  // Ensure each error item has the required properties\r",
									"\t\t\tpm.expect(item.property).to.be.a('string');  // Ensure 'property' is a string\r",
									"\t\t\tpm.expect(item.message).to.be.a('string');  // Ensure 'message' is a string\r",
									"\r",
									"\t\t\tpm.expect(item.contraints).to.be.an('object');  // Ensure 'contraints' is an object\r",
									"\r",
									"\t\t\t// Validate specific constraint properties based on the error index\r",
									"\t\t\tif (i % 2 === 0) {\r",
									"                pm.expect(item.contraints).to.have.property('pattern');  // Expect 'pattern' for password pattern error\r",
									"\t\t\t\tpm.expect(item.contraints.pattern).to.be.a('string');  // Ensure 'pattern' is a string\r",
									"\t\t\t} else {\r",
									"                pm.expect(item.contraints).to.have.property('limit');  // Expect 'limit' for password length error\r",
									"\t\t\t\tpm.expect(item.contraints.limit).to.be.a('number');  // Ensure 'limit' is a number\r",
									"\t\t\t}\r",
									"\t\t}\r",
									"\t});\r",
									"\r",
									"\tpm.test(\"Iteration 2 - Verify message -> BAD REQUEST\", () => {\r",
									"\t\tfor (let i = 0; i < response.json().content.length; i++) {\r",
									"\t\t\tlet item = response.json().content[i];\r",
									"\t\t\t// Validate specific constraint properties based on the error index\r",
									"\t\t\tif (i % 2 === 0) {\r",
									"                pm.expect(item.message).to.eql(\"error.presentation.schema.pattern\");\r",
									"\t\t\t} else {\r",
									"\t\t\t\tpm.expect(item.message).to.eql(\"error.presentation.schema.minLength\");\r",
									"\t\t\t}\r",
									"\t\t}\r",
									"\t});\r",
									"// Iteration 2 -> NOT FOUND\r",
									"} else if (pm.info.iteration === 2) {\r",
									"\t// pm.test(\"Iteration 3 - Verify status code -> NOT FOUND\", () => {\r",
									"\t// \tresponse.to.have.status(404);  // Check that the status code is 404\r",
									"\t// \tpm.expect(response.status).to.eql(\"Not Found\");  // Confirm response status as \"Not Found\"\r",
									"\t// });\r",
									"\r",
									"\t// pm.test(\"Iteration 3 - Response body structure is valid -> NOT FOUND\", () => {\r",
									"\t// \tpm.expect(response.json()).to.be.an('object').that.has.property('statusCode');  // statusCode should exist\r",
									"\t// \tpm.expect(response.json().statusCode).to.be.a('number');  // statusCode should be a number\r",
									"\t// \tpm.expect(response.json()).to.be.an('object').that.has.property('content');  // content should exist\r",
									"\t// \tpm.expect(response.json()).to.be.an('object').that.has.property('message');  // message should exist\r",
									"\t// \tpm.expect(response.json().message).to.be.a('string');  // message should be a string\r",
									"\t// \tpm.expect(response.json().content).to.be.an('object').that.has.all.keys('table', 'database');  // content should have 'table' and 'database' keys\r",
									"\t// \tpm.expect(response.json().content.table).to.be.a('string');  // 'table' should be a string\r",
									"\t// \tpm.expect(response.json().content.database).to.be.a('string');  // 'database' should be a string\r",
									"\t// });\r",
									"\r",
									"\t// pm.test(\"Iteration 3 - Verify message -> NOT FOUND\", () => {\r",
									"\t// \tpm.expect(response.json().message).to.eql(`Model AddressBookEntity not found in database ${response.json().content.database}`);  // Expect specific message for unauthorized access\r",
									"\t// });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"idAddressBookEntity\": \"{{idAddressBookEntity}}\",\n    \"sTitle\": \"{{sTitle}}\",\n    \"sStreet\": \"{{sStreet}}\",\n    \"sCity\": \"{{sCity}}\",\n    \"sZipCode\": \"{{sZipCode}}\",\n    \"sCountry\": \"{{sCountry}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"address"
							]
						},
						"description": "Insert a new Address or multiple Address"
					},
					"response": [
						{
							"name": "Default Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sTitle\": \"<string>\",\n  \"sStreet\": \"<string>\",\n  \"sCity\": \"<string>\",\n  \"sZipCode\": \"<string>\",\n  \"sCountry\": \"<string>\",\n  \"idAddressBookEntity\": \"<string>\",\n  \"sProvince\": \"<string>\",\n  \"idPax\": \"<string>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"address"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": \"<number>\",\n  \"message\": \"<string>\",\n  \"content\": {\n    \"data\": [\n      {\n        \"idAddress\": \"<string>\",\n        \"idAddressBookEntity\": \"<null,string>\",\n        \"sTitle\": \"<null,string>\",\n        \"sStreet\": \"<null,string>\",\n        \"sCity\": \"<null,string>\",\n        \"sZipCode\": \"<null,string>\",\n        \"sCountry\": \"<null,string>\",\n        \"sProvince\": \"<null,string>\",\n        \"idPax\": \"<null,string>\"\n      },\n      {\n        \"idAddress\": \"<string>\",\n        \"idAddressBookEntity\": \"<null,string>\",\n        \"sTitle\": \"<null,string>\",\n        \"sStreet\": \"<null,string>\",\n        \"sCity\": \"<null,string>\",\n        \"sZipCode\": \"<null,string>\",\n        \"sCountry\": \"<null,string>\",\n        \"sProvince\": \"<null,string>\",\n        \"idPax\": \"<null,string>\"\n      }\n    ],\n    \"count\": \"<number>\"\n  }\n}"
						}
					]
				},
				{
					"name": "Address - Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the current iteration and response details\r",
									"const response = pm.response;\r",
									"\r",
									"// Define the parameters to test\r",
									"const params = [\r",
									"    { key: 'idAddress', value: '{\"$in\": [\"301\"]}' },\r",
									"    { key: 'idAddress', value: '{\"$nin\": [\"301\"]}' },\r",
									"    { key: 'idAddress', value: '{\"$eq\": \"301\"}' },\r",
									"    { key: 'idAddress', value: '{\"$neq\": \"301\"}' },\r",
									"    { key: 'idAddress', value: '{\"$match\": \"301\"}' },\r",
									"    { key: 'idAddress', value: '{\"$lt\": \"302\"}' },\r",
									"    { key: 'idAddress', value: '{\"$lte\": \"302\"}' },\r",
									"    { key: 'idAddress', value: '{\"$gt\": \"302\"}' },\r",
									"    { key: 'idAddress', value: '{\"$gte\": \"302\"}' },\r",
									"    { key: 'sProvince', value: '{\"$isNull\": true}' },\r",
									"    { key: 'idAddress', value: '{\"$isNotNull\": true}' }\r",
									"];\r",
									"\r",
									"// Iteration 1 -> SUCCESS\r",
									"if (pm.info.iteration === 0) {\r",
									"    // Loop through each parameter and apply them to the request\r",
									"    params.forEach((param) => {\r",
									"        // Clear the existing query parameters before adding new ones\r",
									"        pm.request.url.query.clear();\r",
									"\r",
									"        // Add the current parameter to the URL\r",
									"        pm.request.url.query.add({ key: param.key, value: param.value });\r",
									"\r",
									"        // Send the request with the updated query params\r",
									"        pm.sendRequest(pm.request, (_, res) => {\r",
									"            pm.test(`Iteration 1 - Verify status code ${param.value} -> SUCCESS`, () => {\r",
									"                pm.response.to.have.status(200);\r",
									"                pm.expect(res.status).to.eql(\"OK\");\r",
									"            });\r",
									"\r",
									"            pm.test(`Iteration 1 - Response body structure is valid ${param.value} -> SUCCESS`, () => {\r",
									"                pm.expect(res.json()).to.be.an('object').that.has.property('statusCode');\r",
									"                pm.expect(res.json().statusCode).to.be.a('number');\r",
									"\r",
									"                pm.expect(res.json()).to.be.an('object').that.has.property('message');\r",
									"                pm.expect(res.json().message).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json()).to.be.an('object').that.has.property('content');\r",
									"\r",
									"                pm.expect(res.json().content.data).to.be.an('array');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('idAddress');\r",
									"                pm.expect(res.json().content.data[0].idAddress).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('idAddressBookEntity');\r",
									"                pm.expect(res.json().content.data[0].idAddressBookEntity).to.satisfy((value) => typeof value === 'string' || value === null);\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('sTitle');\r",
									"                pm.expect(res.json().content.data[0].sTitle).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('sStreet');\r",
									"                pm.expect(res.json().content.data[0].sStreet).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('sCity');\r",
									"                pm.expect(res.json().content.data[0].sCity).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('sZipCode');\r",
									"                pm.expect(res.json().content.data[0].sZipCode).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('sCountry');\r",
									"                pm.expect(res.json().content.data[0].sCountry).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('sProvince');\r",
									"                pm.expect(res.json().content.data[0].sProvince).to.satisfy((value) => typeof value === 'string' || value === null);\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('idPax');\r",
									"                pm.expect(res.json().content.data[0].idPax).to.satisfy((value) => typeof value === 'string' || value === null);\r",
									"\r",
									"                pm.expect(res.json().content).to.be.an('object').that.has.property('count');\r",
									"                pm.expect(res.json().content.count).to.be.a('number');\r",
									"            });\r",
									"\r",
									"            pm.test(`Iteration 1 - Verify message contains example ${param.value} -> SUCCESS`, () => {\r",
									"                pm.expect(response.json().message).to.eql(\"Address: 1 items updated\");\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"    // Iteration 2 -> BAD REQUEST\r",
									"} else if (pm.info.iteration === 1) {\r",
									"    // Loop through each parameter and apply them to the request\r",
									"    params.forEach((param) => {\r",
									"        // Clear the existing query parameters before adding new ones\r",
									"        pm.request.url.query.clear();\r",
									"\r",
									"        // Add the current parameter to the URL\r",
									"        pm.request.url.query.add({ key: param.key, value: param.value });\r",
									"\r",
									"        // Send the request with the updated query params\r",
									"        pm.sendRequest(pm.request, (_, res) => {\r",
									"            pm.test(`Iteration 2 - Verify status code ${param.value} -> BAD REQUEST`, () => {\r",
									"                pm.response.to.have.status(400);\r",
									"                pm.expect(res.status).to.eql(\"Bad Request\");\r",
									"            });\r",
									"\r",
									"            pm.test(`Iteration 2 - Response body structure is valid ${param.value} -> BAD REQUEST`, () => {\r",
									"                pm.expect(res.json()).to.be.an('object').that.has.property('statusCode');  // statusCode should exist\r",
									"                pm.expect(res.json().statusCode).to.be.a('number');  // statusCode should be a number\r",
									"                pm.expect(res.json()).to.be.an('object').that.has.property('content');  // content should exist\r",
									"                pm.expect(res.json().content).to.be.an('array');  // content should be an array of error details\r",
									"\r",
									"                // Iterate over each item in the content array and verify its structure\r",
									"                for (let i = 0; i < res.json().content.length; i++) {\r",
									"                    let item = res.json().content[i];\r",
									"\r",
									"                    pm.expect(item).to.be.an('object').that.has.all.keys('property', 'message', 'contraints');  // Ensure each error item has the required properties\r",
									"                    pm.expect(item.property).to.be.a('string');  // Ensure 'property' is a string\r",
									"                    pm.expect(item.message).to.be.a('string');  // Ensure 'message' is a string\r",
									"\r",
									"                    pm.expect(item.contraints).to.be.an('object');  // Ensure 'contraints' is an object\r",
									"\r",
									"                    // Validate specific constraint properties based on the error index\r",
									"                    if (i % 2 === 0) {\r",
									"                        pm.expect(item.contraints).to.have.property('pattern');  // Expect 'pattern' for password pattern error\r",
									"                        pm.expect(item.contraints.pattern).to.be.a('string');  // Ensure 'pattern' is a string\r",
									"                    } else {\r",
									"                        pm.expect(item.contraints).to.have.property('limit');  // Expect 'limit' for password length error\r",
									"                        pm.expect(item.contraints.limit).to.be.a('number');  // Ensure 'limit' is a number\r",
									"                    }\r",
									"                }\r",
									"            });\r",
									"\r",
									"            pm.test(`Iteration 2 - Verify message ${param.value} -> BAD REQUEST`, () => {\r",
									"                for (let i = 0; i < res.json().content.length; i++) {\r",
									"                    let item = res.json().content[i];\r",
									"                    // Validate specific constraint properties based on the error index\r",
									"                    if (i % 2 === 0) {\r",
									"                        pm.expect(item.message).to.eql(\"error.presentation.schema.pattern\");\r",
									"                    } else {\r",
									"                        pm.expect(item.message).to.eql(\"error.presentation.schema.minLength\");\r",
									"                    }\r",
									"                }\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"    pm.execution.setNextRequest(null);\r",
									"// Iteration 3 -> NOT FOUND\r",
									"} else if (pm.info.iteration === 2) {\r",
									"    // Loop through each parameter and apply them to the request\r",
									"    // params.forEach((param) => {\r",
									"    //     // Clear the existing query parameters before adding new ones\r",
									"    //     pm.request.url.query.clear();\r",
									"\r",
									"    //     // Add the current parameter to the URL\r",
									"    //     pm.request.url.query.add({ key: param.key, value: param.value });\r",
									"\r",
									"    //     // Send the request with the updated query params\r",
									"    //     pm.sendRequest(pm.request, (_, res) => {\r",
									"    //         pm.test(`Iteration 3 - Verify status code ${param.value} -> NOT FOUND`, () => {\r",
									"    //             pm.response.to.have.status(404);  // Check that the status code is 404\r",
									"    //             pm.expect(res.status).to.eql(\"Not Found\");  // Confirm response status as \"Not Found\"\r",
									"    //         });\r",
									"\r",
									"    //         pm.test(`Iteration 3 - Response body structure is valid ${param.value} -> NOT FOUND`, () => {\r",
									"    //             pm.expect(res.json()).to.be.an('object').that.has.property('statusCode');  // statusCode should exist\r",
									"    //             pm.expect(res.json().statusCode).to.be.a('number');  // statusCode should be a number\r",
									"    //             pm.expect(res.json()).to.be.an('object').that.has.property('content');  // content should exist\r",
									"    //             pm.expect(res.json()).to.be.an('object').that.has.property('message');  // message should exist\r",
									"    //             pm.expect(res.json().message).to.be.a('string');  // message should be a string\r",
									"    //             pm.expect(res.json().content).to.be.an('object').that.has.all.keys('table', 'database');  // content should have 'table' and 'database' keys\r",
									"    //             pm.expect(res.json().content.table).to.be.a('string');  // 'table' should be a string\r",
									"    //             pm.expect(res.json().content.database).to.be.a('string');  // 'database' should be a string\r",
									"    //         });\r",
									"\r",
									"    //         pm.test(`Iteration 3 - Verify message ${param.value} -> NOT FOUND`, () => {\r",
									"    //             pm.expect(res.json().message).to.eql(`Model AddressBookEntity not found in database ${response.json().content.database}`);  // Expect specific message for unauthorized access\r",
									"    //         });\r",
									"    //     });\r",
									"    // });\r",
									"    pm.execution.setNextRequest(null);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"idAddressBookEntity\": \"{{idAddressBookEntity}}\",\n    \"sTitle\": \"{{sTitle}}\",\n    \"sStreet\": \"{{sStreet}}\",\n    \"sCity\": \"{{sCity}}\",\n    \"sZipCode\": \"{{sZipCode}}\",\n    \"sCountry\": \"{{sCountry}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/address?idAddress={\"$eq\":\"301\"}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"address"
							],
							"query": [
								{
									"key": "idAddress",
									"value": "{\"$in\":[\"1\",\"2\"]}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$nin\":[\"1\",\"2\"]}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$neq\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$match\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$lt\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$lte\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$gt\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$gte\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddressBookEntity",
									"value": "{\"$isNull\":true}",
									"disabled": true
								},
								{
									"key": "sProvince",
									"value": "{\"$isNotNull\":true}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$eq\":\"301\"}"
								}
							]
						},
						"description": "Update all Address or multiple Address by query"
					},
					"response": [
						{
							"name": "Default Response",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"idAddressBookEntity\": \"<string>\",\n  \"sTitle\": \"<string>\",\n  \"sStreet\": \"<string>\",\n  \"sCity\": \"<string>\",\n  \"sZipCode\": \"<string>\",\n  \"sCountry\": \"<string>\",\n  \"sProvince\": \"<string>\",\n  \"idPax\": \"<string>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/address?$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"address"
									],
									"query": [
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": \"<number>\",\n  \"message\": \"<string>\",\n  \"content\": {\n    \"data\": [\n      {\n        \"idAddress\": \"<string>\",\n        \"idAddressBookEntity\": \"<null,string>\",\n        \"sTitle\": \"<null,string>\",\n        \"sStreet\": \"<null,string>\",\n        \"sCity\": \"<null,string>\",\n        \"sZipCode\": \"<null,string>\",\n        \"sCountry\": \"<null,string>\",\n        \"sProvince\": \"<null,string>\",\n        \"idPax\": \"<null,string>\"\n      },\n      {\n        \"idAddress\": \"<string>\",\n        \"idAddressBookEntity\": \"<null,string>\",\n        \"sTitle\": \"<null,string>\",\n        \"sStreet\": \"<null,string>\",\n        \"sCity\": \"<null,string>\",\n        \"sZipCode\": \"<null,string>\",\n        \"sCountry\": \"<null,string>\",\n        \"sProvince\": \"<null,string>\",\n        \"idPax\": \"<null,string>\"\n      }\n    ],\n    \"count\": \"<number>\"\n  }\n}"
						}
					]
				},
				{
					"name": "Address - Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the current iteration and response details\r",
									"const response = pm.response;\r",
									"\r",
									"// Define the parameters to test\r",
									"const params = [\r",
									"    // { key: 'idAddress', value: '{\"$in\": [\"300\"]}' },\r",
									"    // { key: 'idAddress', value: '{\"$nin\": [\"121\"]}' },\r",
									"    // { key: 'idAddress', value: '{\"$eq\": \"121\"}' },\r",
									"    // { key: 'idAddress', value: '{\"$neq\": \"122\"}' },\r",
									"    // { key: 'idAddress', value: '{\"$match\": \"123\"}' },\r",
									"    // { key: 'idAddress', value: '{\"$lt\": \"28\"}' },\r",
									"    // { key: 'idAddress', value: '{\"$lte\": \"36\"}' },\r",
									"    // { key: 'idAddress', value: '{\"$gt\": \"206\"}' },\r",
									"    // { key: 'idAddress', value: '{\"$gte\": \"207\"}' },\r",
									"    // { key: 'idAddress', value: '{\"$isNull\": true}' },\r",
									"    // { key: 'idAddress', value: '{\"$isNotNull\": true}' }\r",
									"];\r",
									"\r",
									"// Iteration 1 -> SUCCESS\r",
									"if (pm.info.iteration === 0) {\r",
									"    // Loop through each parameter and apply them to the request\r",
									"    params.forEach((param) => {\r",
									"        // Clear the existing query parameters before adding new ones\r",
									"        pm.request.url.query.clear();\r",
									"\r",
									"        // Add the current parameter to the URL\r",
									"        pm.request.url.query.add({ key: param.key, value: param.value });\r",
									"\r",
									"        // Send the request with the updated query params\r",
									"        pm.sendRequest(pm.request, (_, res) => {\r",
									"            pm.test(`Iteration 1 - Verify status code ${param.value} -> SUCCESS`, () => {\r",
									"                pm.response.to.have.status(200);\r",
									"                pm.expect(res.status).to.eql(\"OK\");\r",
									"            });\r",
									"\r",
									"            pm.test(`Iteration 1 - Response body structure is valid ${param.value} -> SUCCESS`, () => {\r",
									"                pm.expect(res.json()).to.be.an('object').that.has.property('statusCode');\r",
									"                pm.expect(res.json().statusCode).to.be.a('number');\r",
									"\r",
									"                pm.expect(res.json()).to.be.an('object').that.has.property('message');\r",
									"                pm.expect(res.json().message).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json()).to.be.an('object').that.has.property('content');\r",
									"\r",
									"                pm.expect(res.json().content.data).to.be.an('array');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('idAddress');\r",
									"                pm.expect(res.json().content.data[0].idAddress).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('idAddressBookEntity');\r",
									"                pm.expect(res.json().content.data[0].idAddressBookEntity).to.satisfy((value) => typeof value === 'string' || value === null);\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('sTitle');\r",
									"                pm.expect(res.json().content.data[0].sTitle).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('sStreet');\r",
									"                pm.expect(res.json().content.data[0].sStreet).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('sCity');\r",
									"                pm.expect(res.json().content.data[0].sCity).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('sZipCode');\r",
									"                pm.expect(res.json().content.data[0].sZipCode).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('sCountry');\r",
									"                pm.expect(res.json().content.data[0].sCountry).to.be.a('string');\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('sProvince');\r",
									"                pm.expect(res.json().content.data[0].sProvince).to.satisfy((value) => typeof value === 'string' || value === null);\r",
									"\r",
									"                pm.expect(res.json().content.data[0]).to.be.an('object').that.has.property('idPax');\r",
									"                pm.expect(res.json().content.data[0].idPax).to.satisfy((value) => typeof value === 'string' || value === null);\r",
									"\r",
									"                pm.expect(res.json().content).to.be.an('object').that.has.property('count');\r",
									"                pm.expect(res.json().content.count).to.be.a('number');\r",
									"            });\r",
									"\r",
									"            pm.test(`Iteration 1 - Verify message contains example ${param.value} -> SUCCESS`, () => {\r",
									"                pm.expect(response.json().message).to.eql(\"Address: 1 items deleted\");\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"address"
							],
							"query": [
								{
									"key": "idAddress",
									"value": "{\"$in\":[\"300\"]}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$nin\":[\"1\",\"2\"]}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$neq\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$match\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$lt\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$lte\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$gt\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$gte\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$isNull\":true}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$isNotNull\":true}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$eq\":\"250\"}",
									"disabled": true
								}
							]
						},
						"description": "Delete all Address or multiple Address by query"
					},
					"response": [
						{
							"name": "Default Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/address?$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"address"
									],
									"query": [
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": \"<number>\",\n  \"message\": \"<string>\",\n  \"content\": {\n    \"data\": [\n      {\n        \"idAddress\": \"<string>\",\n        \"idAddressBookEntity\": \"<null,string>\",\n        \"sTitle\": \"<null,string>\",\n        \"sStreet\": \"<null,string>\",\n        \"sCity\": \"<null,string>\",\n        \"sZipCode\": \"<null,string>\",\n        \"sCountry\": \"<null,string>\",\n        \"sProvince\": \"<null,string>\",\n        \"idPax\": \"<null,string>\"\n      },\n      {\n        \"idAddress\": \"<string>\",\n        \"idAddressBookEntity\": \"<null,string>\",\n        \"sTitle\": \"<null,string>\",\n        \"sStreet\": \"<null,string>\",\n        \"sCity\": \"<null,string>\",\n        \"sZipCode\": \"<null,string>\",\n        \"sCountry\": \"<null,string>\",\n        \"sProvince\": \"<null,string>\",\n        \"idPax\": \"<null,string>\"\n      }\n    ],\n    \"count\": \"<number>\"\n  }\n}"
						}
					]
				},
				{
					"name": "Address - Find One",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the current iteration and response details\r",
									"const response = pm.response;\r",
									"\r",
									"// Set the default idAddress for success case\r",
									"let defaultIdAddress = \"1\";\r",
									"\r",
									"// ItÃ©ration 1 -> SUCCESS (premiÃ¨re itÃ©ration)\r",
									"if (pm.info.iteration === 0) {\r",
									"    pm.test(\"Find One - SUCCESS\", () => {       \r",
									"        // Set the ID for success case\r",
									"        pm.environment.set(\"idAddress\", defaultIdAddress);\r",
									"\r",
									"        // VÃ©rifier le code de statut\r",
									"        pm.test(\"Verify status code\", () => {\r",
									"            response.to.have.status(200);\r",
									"            pm.expect(response.status).to.eql(\"OK\");\r",
									"        });\r",
									"\r",
									"        // VÃ©rifier la structure du corps de la rÃ©ponse\r",
									"        pm.test(\"Response body structure is valid\", () => {\r",
									"            const jsonResponse = response.json();\r",
									"\r",
									"            pm.expect(jsonResponse).to.be.an('object').that.has.property('statusCode');\r",
									"            pm.expect(jsonResponse.statusCode).to.be.a('number');\r",
									"            pm.expect(jsonResponse).to.be.an('object').that.has.property('message');\r",
									"            pm.expect(jsonResponse.message).to.be.a('string');\r",
									"            pm.expect(jsonResponse).to.be.an('object').that.has.property('content');\r",
									"            \r",
									"            const data = jsonResponse.content.data;\r",
									"            \r",
									"            pm.expect(data).to.be.an('object').that.has.property('idAddress');\r",
									"            pm.expect(data.idAddress).to.be.a('string');\r",
									"            \r",
									"            pm.expect(data).to.be.an('object').that.has.property('idAddressBookEntity');\r",
									"            pm.expect(data.idAddressBookEntity).to.satisfy((value) => typeof value === 'string' || value === null);\r",
									"\r",
									"            pm.expect(data).to.be.an('object').that.has.property('sTitle');\r",
									"            pm.expect(data.sTitle).to.be.a('string');\r",
									"\r",
									"            pm.expect(data).to.be.an('object').that.has.property('sStreet');\r",
									"            pm.expect(data.sStreet).to.be.a('string');\r",
									"\r",
									"            pm.expect(data).to.be.an('object').that.has.property('sCity');\r",
									"            pm.expect(data.sCity).to.be.a('string');\r",
									"\r",
									"            pm.expect(data).to.be.an('object').that.has.property('sZipCode');\r",
									"            pm.expect(data.sZipCode).to.be.a('string');\r",
									"\r",
									"            pm.expect(data).to.be.an('object').that.has.property('sCountry');\r",
									"            pm.expect(data.sCountry).to.be.a('string');\r",
									"\r",
									"            pm.expect(data).to.be.an('object').that.has.property('sProvince');\r",
									"            pm.expect(data.sProvince).to.satisfy((value) => typeof value === 'string' || value === null);\r",
									"\r",
									"            pm.expect(data).to.be.an('object').that.has.property('idPax');\r",
									"            pm.expect(data.idPax).to.satisfy((value) => typeof value === 'string' || value === null);\r",
									"        });\r",
									"\r",
									"        // VÃ©rifier le message dans la rÃ©ponse\r",
									"        pm.test(\"Verify message contains example\", () => {\r",
									"            const expectedMessage = \"Address - item found\";\r",
									"            pm.expect(response.json().message).to.eql(expectedMessage);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"// ItÃ©ration 2 -> NOT FOUND (deuxiÃ¨me itÃ©ration)\r",
									"else if (pm.info.iteration === 1) {\r",
									"    pm.test(\"Find One - NOT FOUND\", () => {       \r",
									"        // Set the ID to a non-existing address ID for \"Not Found\" case\r",
									"        pm.environment.set(\"idAddress\", \"999\");\r",
									"\r",
									"        // VÃ©rifier le code de statut pour \"Not Found\"\r",
									"        pm.test(\"Verify status code\", () => {\r",
									"            response.to.have.status(404);\r",
									"            pm.expect(response.status).to.eql(\"Not Found\");\r",
									"        });\r",
									"\r",
									"        // AprÃ¨s l'itÃ©ration NOT FOUND, on remet le \"idAddress\" Ã  la valeur par dÃ©faut pour de futurs tests\r",
									"        pm.environment.set(\"idAddress\", defaultIdAddress);\r",
									"\r",
									"        pm.execution.setNextRequest(null);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/address/:idAddress",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"address",
								":idAddress"
							],
							"variable": [
								{
									"key": "idAddress",
									"value": "{{idAddress}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Find one Address by idAddress"
					},
					"response": [
						{
							"name": "Default Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/address/:idAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"address",
										":idAddress"
									],
									"variable": [
										{
											"key": "idAddress",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": \"<number>\",\n  \"message\": \"<string>\",\n  \"content\": {\n    \"data\": {\n      \"idAddress\": \"<string>\",\n      \"idAddressBookEntity\": \"<null,string>\",\n      \"sTitle\": \"<null,string>\",\n      \"sStreet\": \"<null,string>\",\n      \"sCity\": \"<null,string>\",\n      \"sZipCode\": \"<null,string>\",\n      \"sCountry\": \"<null,string>\",\n      \"sProvince\": \"<null,string>\",\n      \"idPax\": \"<null,string>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Address - Find",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the current iteration and response details\r",
									"const response = pm.response;\r",
									"\r",
									"// Iteration 1 -> SUCCESS\r",
									"if (pm.info.iteration === 0) {\r",
									"    pm.test(\"Verify status code\", () => {\r",
									"        response.to.have.status(200);  // Check that the status code is 200\r",
									"        pm.expect(response.status).to.eql(\"OK\");  // Confirm response status as \"OK\"\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response body structure is valid\", () => {\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('statusCode');  // statusCode should exist\r",
									"        pm.expect(response.json().statusCode).to.be.a('number');  // statusCode should be a number\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('message');  // message should exist\r",
									"        pm.expect(response.json().message).to.be.a('string');  // message should be a string\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('content');  // content should exist\r",
									"        pm.expect(response.json().content.data).to.be.an('array');  // content should be an array of data\r",
									"        pm.expect(response.json().content).to.be.an('object').that.has.property('count'); // count should exist\r",
									"        pm.expect(response.json().content.count).to.be.a('number'); // count should be a number\r",
									"        pm.expect(response.json().content).to.be.an('object').that.has.property('total'); // total should exist\r",
									"        pm.expect(response.json().content.total).to.be.a('number'); // total should be a number\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify message contains example\", () => {\r",
									"        let str = `Address: ${response.json().content.count} items found out of ${response.json().content.total}`;\r",
									"        pm.expect(response.json().message).to.eql(str);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test query parameters dynamically\", () => {\r",
									"        // Define the parameters to test\r",
									"        const params = [\r",
									"            { key: 'limit', value: '100' },\r",
									"            { key: 'sTitle', value: '{\"$in\": [\"sTitleValue\"]}' },\r",
									"            { key: 'sTitle', value: '{\"$nin\": [\"testValue\"]}' },\r",
									"            { key: 'sTitle', value: '{\"$eq\": \"sTitleValue\"}' },\r",
									"            { key: 'sTitle', value: '{\"$neq\": \"vroumvroum\"}' },\r",
									"            { key: 'sTitle', value: '{\"$match\": \"tle\"}' },\r",
									"            { key: 'idAddress', value: '{\"$lt\": \"302\"}' },\r",
									"            { key: 'idAddress', value: '{\"$lte\": \"302\"}' },\r",
									"            { key: 'idAddress', value: '{\"$gt\": \"302\"}' },\r",
									"            { key: 'idAddress', value: '{\"$gte\": \"302\"}' },\r",
									"            { key: 'sProvince', value: '{\"$isNull\": true}' },\r",
									"            { key: 'idAddress', value: '{\"$isNotNull\": true}' },\r",
									"        ];\r",
									"\r",
									"        // Loop through each parameter and apply them to the request\r",
									"        params.forEach((param) => {\r",
									"            // Clear the existing query parameters before adding new ones\r",
									"            pm.request.url.query.clear();\r",
									"\r",
									"            // Add the current parameter to the URL\r",
									"            pm.request.url.query.add({ key: param.key, value: param.value });\r",
									"\r",
									"            // Send the request with the updated query params\r",
									"            pm.sendRequest(pm.request, (_, res) => {\r",
									"                if (param.key === 'limit') {\r",
									"                    // Check if the response matches the expected result based on the limit query param\r",
									"                    pm.test(`Check that the response contains no more than ${param.value} items`, () => {\r",
									"                        pm.expect(res.json().content.count).to.be.at.most(parseInt(param.value));  // Ensure count is <= limit\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (param.key === 'sTitle' && param.value.includes(\"$in\")) {\r",
									"                    pm.test(\"Check if sTitle contains one of the specified values\", () => {\r",
									"                        const filteredItems = res.json().content.data; // Adjust based on the actual response structure\r",
									"                        const expectedValues = [\"sTitleValue\"];\r",
									"\r",
									"                        // Ensure that at least one of the items has a sTitle value from the allowed list\r",
									"                        const isValid = filteredItems.some(item => item.sTitle.includes(expectedValues));\r",
									"\r",
									"                        pm.expect(isValid).to.be.true;  // Ensure that one of the sTitle values matches\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (param.key === 'sTitle' && param.value.includes(\"$nin\")) {\r",
									"                    pm.test(\"Check if sTitle do not contains one of the specified values\", () => {\r",
									"                        const filteredItems = res.json().content.data; // Adjust based on the actual response structure\r",
									"                        const expectedValues = [\"testValue\"];\r",
									"\r",
									"                        // Ensure that at least one of the items has a sTitle value from the allowed list\r",
									"                        const isValid = filteredItems.every(item => !item.sTitle.includes(expectedValues));\r",
									"\r",
									"                        pm.expect(isValid).to.be.true;  // Ensure that one of the sTitle values matches\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (param.key === 'sTitle' && param.value.includes(\"$eq\")) {\r",
									"                    pm.test(\"Ensure that sTitle does equal sTitleValue\", () => {\r",
									"                        const filteredItems = res.json().content.data; // Adjust based on the actual response structure\r",
									"                        const expectedValue = \"sTitleValue\";\r",
									"\r",
									"                        const isValid = filteredItems.every(item => item.sTitle === expectedValue);\r",
									"\r",
									"                        pm.expect(isValid).to.be.true;\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (param.key === 'sTitle' && param.value.includes(\"$neq\")) {\r",
									"                    pm.test(\"Ensure that sTitle does not equal vroumvroum\", () => {\r",
									"                        const filteredItems = res.json().content.data; // Adjust based on the actual response structure\r",
									"                        const expectedValue = \"vroumvroum\";\r",
									"\r",
									"                        // Ensure that none of the items do not have a sTitle equal to \"test\"\r",
									"                        const isValid = filteredItems.every(item => item.sTitle !== expectedValue);\r",
									"\r",
									"                        pm.expect(isValid).to.be.true;  // Ensure that none of the sTitle values match \"LuxAirport\"\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (param.key === 'sTitle' && param.value.includes(\"$match\")) {\r",
									"                    pm.test(\"Check if sTitle contains the partial string tle\", () => {\r",
									"                        const filteredItems = res.json().content.data;\r",
									"                        const expectedMatch = \"tle\";\r",
									"\r",
									"                        const isValid = filteredItems.some(item => item.sTitle.includes(expectedMatch));\r",
									"                        pm.expect(isValid).to.be.true;\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (param.key === 'idAddress' && param.value.includes(\"$lt\")) {\r",
									"                    pm.test(\"Ensure idAddress is less than 1000\", () => {\r",
									"                        const filteredItems = res.json().content.data;\r",
									"                        const expectedValue = 1000;\r",
									"\r",
									"                        const isValid = filteredItems.every(item => item.idAddress < expectedValue);\r",
									"                        pm.expect(isValid).to.be.true;\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (param.key === 'idAddress' && param.value.includes(\"$lte\")) {\r",
									"                    pm.test(\"Ensure idAddress is less than or equal to 302\", () => {\r",
									"                        const filteredItems = res.json().content.data;\r",
									"                        const expectedValue = 302;\r",
									"\r",
									"                        const isValid = filteredItems.some(item => item.idAddress <= expectedValue);\r",
									"                        pm.expect(isValid).to.be.true;\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (param.key === 'idAddress' && param.value.includes(\"$gt\")) {\r",
									"                    pm.test(\"Ensure idAddress is greater than 2\", () => {\r",
									"                        const filteredItems = res.json().content.data;\r",
									"                        const expectedValue = 1;\r",
									"\r",
									"                        const isValid = filteredItems.some(item => item.idAddress > expectedValue);\r",
									"                        pm.expect(isValid).to.be.true;\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (param.key === 'idAddress' && param.value.includes(\"$gte\")) {\r",
									"                    pm.test(\"Ensure idAddress is greater than or equal to 1\", () => {\r",
									"                        const filteredItems = res.json().content.data;\r",
									"                        const expectedValue = 1;\r",
									"\r",
									"                        const isValid = filteredItems.every(item => item.idAddress >= expectedValue);\r",
									"                        pm.expect(isValid).to.be.true;\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (param.key === 'sProvince' && param.value.includes(\"$isNull\")) {\r",
									"                    pm.test(\"Ensure sProvince is null\", () => {\r",
									"                        const filteredItems = res.json().content.data;\r",
									"                        const isValid = filteredItems.every(item => item.sProvince === null);\r",
									"                        pm.expect(isValid).to.be.true;\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (param.key === 'sProvince' && param.value.includes(\"$isNotNull\")) {\r",
									"                    pm.test(\"Ensure sProvince is not null\", () => {\r",
									"                        const filteredItems = res.json().content.data;\r",
									"                        const isValid = filteredItems.every(item => item.sProvince !== null);\r",
									"                        pm.expect(isValid).to.be.true;\r",
									"                    });\r",
									"                }\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"address"
							],
							"query": [
								{
									"key": "idAddress",
									"value": "{\"$in\":[\"1\",\"2\"]}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$nin\":[\"1\",\"2\"]}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$eq\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$neq\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$match\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$lt\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$lte\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$gt\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$gte\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddressBookEntity",
									"value": "{\"$isNull\":true}",
									"disabled": true
								},
								{
									"key": "sProvince",
									"value": "{\"$isNotNull\":true}",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "50",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "10",
									"disabled": true
								}
							]
						},
						"description": "Find all Address or find Address by query"
					},
					"response": [
						{
							"name": "Default Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/address?$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&limit=<string>&offset=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"address"
									],
									"query": [
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "limit",
											"value": "<string>"
										},
										{
											"key": "offset",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": \"<number>\",\n  \"message\": \"<string>\",\n  \"content\": {\n    \"data\": [\n      {\n        \"idAddress\": \"<string>\",\n        \"idAddressBookEntity\": \"<null,string>\",\n        \"sTitle\": \"<null,string>\",\n        \"sStreet\": \"<null,string>\",\n        \"sCity\": \"<null,string>\",\n        \"sZipCode\": \"<null,string>\",\n        \"sCountry\": \"<null,string>\",\n        \"sProvince\": \"<null,string>\",\n        \"idPax\": \"<null,string>\"\n      },\n      {\n        \"idAddress\": \"<string>\",\n        \"idAddressBookEntity\": \"<null,string>\",\n        \"sTitle\": \"<null,string>\",\n        \"sStreet\": \"<null,string>\",\n        \"sCity\": \"<null,string>\",\n        \"sZipCode\": \"<null,string>\",\n        \"sCountry\": \"<null,string>\",\n        \"sProvince\": \"<null,string>\",\n        \"idPax\": \"<null,string>\"\n      }\n    ],\n    \"count\": \"<number>\",\n    \"total\": \"<number>\"\n  }\n}"
						}
					]
				},
				{
					"name": "Address - Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the current iteration and response details\r",
									"const response = pm.response;\r",
									"\r",
									"// Iteration 1 -> SUCCESS\r",
									"if (pm.info.iteration === 0) {\r",
									"    pm.test(\"Verify status code\", () => {\r",
									"        response.to.have.status(200);  // Check that the status code is 200\r",
									"        pm.expect(response.status).to.eql(\"OK\");  // Confirm response status as \"OK\"\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response body structure is valid\", () => {\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('statusCode');  // statusCode should exist\r",
									"        pm.expect(response.json().statusCode).to.be.a('number');  // statusCode should be a number\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('message');  // message should exist\r",
									"        pm.expect(response.json().message).to.be.a('string');  // message should be a string\r",
									"        pm.expect(response.json()).to.be.an('object').that.has.property('content');  // content should exist\r",
									"        pm.expect(response.json().content).to.be.an('object').that.has.property('count');\r",
									"        pm.expect(response.json().content.count).to.be.a('number');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify message contains example\", () => {\r",
									"        let str = `Address: ${response.json().content.count} items found`;\r",
									"        pm.expect(response.json().message).to.eql(str);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test query parameters dynamically\", () => {\r",
									"        // Define the parameters to test\r",
									"        const params = [\r",
									"            { key: 'idAddress', value: '{\"$in\": [\"302\"]}' },\r",
									"            { key: 'sTitle', value: '{\"$nin\": [\"sTitleValue\"]}' },\r",
									"            { key: 'idAddress', value: '{\"$eq\": \"302\"}' },\r",
									"            { key: 'sTitle', value: '{\"$neq\": \"sTitleValue\"}' },\r",
									"            { key: 'sTitle', value: '{\"$match\": \"tle\"}' },\r",
									"            { key: 'idAddress', value: '{\"$lt\": \"302\"}' },\r",
									"            { key: 'idAddress', value: '{\"$lte\": \"302\"}' },\r",
									"            { key: 'idAddress', value: '{\"$gt\": \"302\"}' },\r",
									"            { key: 'idAddress', value: '{\"$gte\": \"302\"}' },\r",
									"            { key: 'idAddress', value: '{\"$isNull\": true}' },\r",
									"            { key: 'idAddress', value: '{\"$isNotNull\": true}' },\r",
									"        ];\r",
									"\r",
									"        // Loop through each parameter and apply them to the request\r",
									"        params.forEach((param) => {\r",
									"            // Clear the existing query parameters before adding new ones\r",
									"            pm.request.url.query.clear();\r",
									"\r",
									"            // Add the current parameter to the URL\r",
									"            pm.request.url.query.add({ key: param.key, value: param.value });\r",
									"\r",
									"            // Send the request with the updated query params\r",
									"            pm.sendRequest(pm.request, (_, res) => {\r",
									"                pm.test(`Check the response for ${param.key} with value ${param.value}`, () => {\r",
									"                    const count = res.json().content.count;\r",
									"\r",
									"                    // Test different query parameter cases\r",
									"                    if (param.key === 'sTitle' && param.value.includes(\"$in\")) {\r",
									"                        pm.test(\"Verify that count reflects the filter for '$in'\", () => {\r",
									"                            pm.expect(count).to.eql(2);  // Ensure count is non-negative\r",
									"                        });\r",
									"                    } \r",
									"\r",
									"                    if (param.key === 'sTitle' && param.value.includes(\"$nin\")) {\r",
									"                        pm.test(\"Verify that count reflects the filter for '$nin'\", () => {\r",
									"                            pm.expect(count).to.be.at.least(0);  // Ensure count is non-negative\r",
									"                        });\r",
									"                    }\r",
									"\r",
									"                    if (param.key === 'sTitle' && param.value.includes(\"$eq\")) {\r",
									"                        pm.test(\"Verify that count reflects the filter for '$eq'\", () => {\r",
									"                            pm.expect(count).to.eql(2);  // Ensure count is non-negative\r",
									"                        });\r",
									"                    }\r",
									"\r",
									"                    if (param.key === 'sTitle' && param.value.includes(\"$neq\")) {\r",
									"                        pm.test(\"Verify that count reflects the filter for '$neq'\", () => {\r",
									"                            pm.expect(count).to.be.at.least(0);  // Ensure count is non-negative\r",
									"                        });\r",
									"                    }\r",
									"\r",
									"                    if (param.key === 'sTitle' && param.value.includes(\"$match\")) {\r",
									"                        pm.test(\"Verify that count reflects the filter for '$match'\", () => {\r",
									"                            pm.expect(count).to.be.at.least(1);  // Ensure count is non-negative\r",
									"                        });\r",
									"                    }\r",
									"\r",
									"                    if (param.key === 'idAddress' && param.value.includes(\"$lt\")) {\r",
									"                        pm.test(\"Verify that count reflects the filter for '$lt'\", () => {\r",
									"                            pm.expect(count).to.be.at.least(1);  // Ensure count is non-negative\r",
									"                        });\r",
									"                    }\r",
									"\r",
									"                    if (param.key === 'idAddress' && param.value.includes(\"$lte\")) {\r",
									"                        pm.test(\"Verify that count reflects the filter for '$lte'\", () => {\r",
									"                            pm.expect(count).to.be.at.least(1);  // Ensure count is non-negative\r",
									"                        });\r",
									"                    }\r",
									"\r",
									"                    if (param.key === 'idAddress' && param.value.includes(\"$gt\")) {\r",
									"                        pm.test(\"Verify that count reflects the filter for '$gt'\", () => {\r",
									"                            pm.expect(count).to.be.at.least(1);  // Ensure count is non-negative\r",
									"                        });\r",
									"                    }\r",
									"\r",
									"                    if (param.key === 'idAddress' && param.value.includes(\"$gte\")) {\r",
									"                        pm.test(\"Verify that count reflects the filter for '$gte'\", () => {\r",
									"                            pm.expect(count).to.be.at.least(1);  // Ensure count is non-negative\r",
									"                        });\r",
									"                    }\r",
									"\r",
									"                    if (param.key === 'sProvince' && param.value.includes(\"$isNull\")) {\r",
									"                        pm.test(\"Verify that count reflects the filter for '$isNull'\", () => {\r",
									"                            pm.expect(count).to.be.at.least(1);  // Ensure count is non-negative\r",
									"                        });\r",
									"                    }\r",
									"\r",
									"                    if (param.key === 'sProvince' && param.value.includes(\"$isNotNull\")) {\r",
									"                        pm.test(\"Verify that count reflects the filter for '$isNotNull'\", () => {\r",
									"                            pm.expect(count).to.be.at.least(1);  // Ensure count is non-negative\r",
									"                        });\r",
									"                    }\r",
									"                });\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/address/count",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"address",
								"count"
							],
							"query": [
								{
									"key": "idAddress",
									"value": "{\"$in\":[\"1\",\"2\"]}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$nin\":[\"1\",\"2\"]}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$eq\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$neq\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$match\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$lt\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$lte\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$gt\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddress",
									"value": "{\"$gte\":\"1\"}",
									"disabled": true
								},
								{
									"key": "idAddressBookEntity",
									"value": "{\"$isNull\":true}",
									"disabled": true
								},
								{
									"key": "sProvince",
									"value": "{\"$isNotNull\":true}",
									"disabled": true
								}
							]
						},
						"description": "Count all Address or count Address by query"
					},
					"response": [
						{
							"name": "Default Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/address/count?$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]&$in=<array>&$nin=<array>&$eq=[object Object]&$neq=[object Object]&$match=<string>&$lt=[object Object]&$lte=[object Object]&$gt=[object Object]&$gte=[object Object]&$isNull=[object Object]&$isNotNull=[object Object]",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"address",
										"count"
									],
									"query": [
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										},
										{
											"key": "$in",
											"value": "<array>"
										},
										{
											"key": "$nin",
											"value": "<array>"
										},
										{
											"key": "$eq",
											"value": "[object Object]"
										},
										{
											"key": "$neq",
											"value": "[object Object]"
										},
										{
											"key": "$match",
											"value": "<string>"
										},
										{
											"key": "$lt",
											"value": "[object Object]"
										},
										{
											"key": "$lte",
											"value": "[object Object]"
										},
										{
											"key": "$gt",
											"value": "[object Object]"
										},
										{
											"key": "$gte",
											"value": "[object Object]"
										},
										{
											"key": "$isNull",
											"value": "[object Object]"
										},
										{
											"key": "$isNotNull",
											"value": "[object Object]"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": \"<number>\",\n  \"message\": \"<string>\",\n  \"content\": {\n    \"count\": \"<number>\"\n  }\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Define the login request details (URL, method, headers, and body)\r",
					"const loginRequest = {\r",
					"    url: 'https://api.mrxsys.com/auth/login',  // API endpoint for login\r",
					"    method: 'POST',  // HTTP method to be used (POST for login)\r",
					"    header: 'Content-Type:application/json',  // Set the header content type to JSON\r",
					"    body: {\r",
					"        mode: 'application/json',  // Body format is JSON\r",
					"        raw: JSON.stringify({  // Request body containing email and password\r",
					"            \"email\": \"contact@mrxsys.com\",  // User email\r",
					"            \"password\": \"1MrX3y3!@#\"  // User password\r",
					"        })\r",
					"    }\r",
					"};\r",
					"\r",
					"// Check if the bearer token is already present in the environment\r",
					"const bearerToken = pm.environment.get('bearerToken');\r",
					"if (!bearerToken) {  // If the token is missing  \r",
					"    // Send the login request to get a new token\r",
					"    pm.sendRequest(loginRequest, function (err, res) {  // Send the login request\r",
					"        const token = res.json().content.access_token;\r",
					"        pm.environment.set('bearerToken', token);\r",
					"    });\r",
					"}\r",
					"\r",
					"// Add a custom header for the database being used in the request\r",
					"pm.request.headers.add({\r",
					"    key: 'database-using',  // Header name\r",
					"    value: 'beDemo6'  // Value indicating the specific database (e.g., 'beDemo1_dev')\r",
					"});\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.mrxsys.com",
			"type": "string"
		},
		{
			"key": "bearerToken",
			"value": "",
			"type": "string"
		}
	]
}